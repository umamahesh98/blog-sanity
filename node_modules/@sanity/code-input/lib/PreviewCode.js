"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PreviewCode;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _reactAce = _interopRequireDefault(require("react-ace"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ui = require("@sanity/ui");

var _config = require("./config");

var _createHighlightMarkers = _interopRequireDefault(require("./createHighlightMarkers"));

require("./editorSupport");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var PreviewContainer = (0, _styledComponents.default)(_ui.Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n"])));
var PreviewInner = (0, _styledComponents.default)(_ui.Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background-color: #272822;\n\n  .ace_editor {\n    box-sizing: border-box;\n    cursor: default;\n    pointer-events: none;\n  }\n\n  .ace_content {\n    box-sizing: border-box;\n    overflow: hidden;\n  }\n"])));

function isSupportedLanguage(mode) {
  var alias = _config.LANGUAGE_ALIASES[mode];

  if (alias) {
    return alias;
  }

  var isSupported = _config.SUPPORTED_LANGUAGES.find(lang => lang.value === mode);

  if (isSupported) {
    return mode;
  }

  return false;
}

function PreviewCode(props) {
  var aceEditorRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    var _aceEditorRef$current;

    if (!(aceEditorRef !== null && aceEditorRef !== void 0 && aceEditorRef.current)) return;
    var editor = (_aceEditorRef$current = aceEditorRef.current) === null || _aceEditorRef$current === void 0 ? void 0 : _aceEditorRef$current.editor;

    if (editor) {
      // Avoid cursor and focus tracking by Ace
      editor.renderer.$cursorLayer.element.style.opacity = 0;
      editor.textInput.getElement().disabled = true;
    }
  }, []);
  var handleEditorChange = (0, _react.useCallback)(() => {// do nothing when the editor changes
  }, []);
  var value = props.value,
      type = props.type;
  var fixedLanguage = (0, _get2.default)(type, 'options.language');
  var mode = isSupportedLanguage(value && value.language || fixedLanguage) || 'text';
  return /*#__PURE__*/_react.default.createElement(PreviewContainer, null, /*#__PURE__*/_react.default.createElement(PreviewInner, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_reactAce.default, {
    ref: aceEditorRef,
    focus: false,
    mode: mode,
    theme: "monokai",
    width: "100%",
    onChange: handleEditorChange,
    maxLines: 200,
    readOnly: true,
    wrapEnabled: true,
    showPrintMargin: false,
    highlightActiveLine: false,
    cursorStart: -1,
    value: value && value.code || '',
    markers: value && value.highlightedLines ? (0, _createHighlightMarkers.default)(value.highlightedLines) : undefined,
    tabSize: 2,
    showGutter: false,
    setOptions: _config.ACE_SET_OPTIONS,
    editorProps: _config.ACE_EDITOR_PROPS
  })));
}